"""Initial

Revision ID: e4aa3eebebf7
Revises: 
Create Date: 2022-08-01 11:44:22.019606

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = "e4aa3eebebf7"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tag",
        sa.Column("id", postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column(
            "dt_created",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "dt_updated",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("name", sa.TEXT(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__tag")),
        sa.UniqueConstraint("id", name=op.f("uq__tag__id")),
    )
    op.create_index(op.f("ix__tag__name"), "tag", ["name"], unique=True)
    op.create_table(
        "user",
        sa.Column("id", postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column(
            "dt_created",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "dt_updated",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("username", sa.TEXT(), nullable=False),
        sa.Column("password", sa.TEXT(), nullable=False),
        sa.Column("email", sa.TEXT(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__user")),
        sa.UniqueConstraint("id", name=op.f("uq__user__id")),
    )
    op.create_index(op.f("ix__user__password"), "user", ["password"], unique=False)
    op.create_index(op.f("ix__user__username"), "user", ["username"], unique=True)
    op.create_table(
        "bookmark",
        sa.Column("id", postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column(
            "dt_created",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "dt_updated",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("title", sa.TEXT(), nullable=False),
        sa.Column("link", sa.TEXT(), nullable=False),
        sa.Column("owner_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("tag", sa.TEXT(), server_default=sa.text("null"), nullable=True),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["user.id"],
            name=op.f("fk__bookmark__owner_id__user"),
            onupdate="SET NULL",
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(["tag"], ["tag.name"], name=op.f("fk__bookmark__tag__tag")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__bookmark")),
        sa.UniqueConstraint("id", name=op.f("uq__bookmark__id")),
    )
    op.create_unique_constraint(op.f("uq__bookmark__id"), "bookmark", ["id"])
    op.create_unique_constraint(op.f("uq__tag__id"), "tag", ["id"])
    op.create_unique_constraint(op.f("uq__user__id"), "user", ["id"])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f("uq__user__id"), "user", type_="unique")
    op.drop_constraint(op.f("uq__tag__id"), "tag", type_="unique")
    op.drop_constraint(op.f("uq__bookmark__id"), "bookmark", type_="unique")
    op.drop_table("bookmark")
    op.drop_index(op.f("ix__user__username"), table_name="user")
    op.drop_index(op.f("ix__user__password"), table_name="user")
    op.drop_table("user")
    op.drop_index(op.f("ix__tag__name"), table_name="tag")
    op.drop_table("tag")
    # ### end Alembic commands ###
